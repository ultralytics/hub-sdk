{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ultralytics HUB-SDK","text":""},{"location":"#where-to-start","title":"Where to start","text":"<ul> <li>Install <code>hub-sdk</code> with pip and get up and running in minutes Quickstart</li> </ul>"},{"location":"dataset/","title":"Dataset Management Operations","text":""},{"location":"dataset/#get-a-dataset-by-id","title":"Get a Dataset by ID","text":"<p>This code snippet illustrates how to fetch a dataset using its unique ID. Simply provide the ID as an argument to the client.dataset function, and you can access information about the dataset, including its data.</p> <pre><code>dataset = client.dataset('Dataset ID')\nprint(dataset.data)\n</code></pre>"},{"location":"dataset/#create-a-dataset","title":"Create a Dataset","text":"<p>The code above demonstrates how to create a new dataset. First, import the necessary libraries, and then define the data you want to associate with the dataset, such as its name. Next, create the dataset using the create_dataset method of the client library.</p> <pre><code>data = {\"meta\": {\"name\": \"my dataset\"}, \"filename\": \"File Name\"}\ndataset = client.dataset()\ndataset.create_dataset(data)\n</code></pre>"},{"location":"dataset/#update-a-dataset","title":"Update a Dataset","text":"<p>In this code example, we show how to update the metadata of a dataset. You need to specify the dataset's ID and provide the new metadata, such as the updated name. The update method allows you to modify dataset properties.</p> <pre><code>dataset = client.dataset(\"Dataset ID\")\nprint(dataset.update({\"meta\": {\"name\": \"dataset Name\"}}))\n</code></pre>"},{"location":"dataset/#delete-a-dataset","title":"delete a Dataset","text":"<p>This code snippet demonstrates how to delete a dataset. Simply specify the dataset's ID, and then call the delete method on the dataset object to remove it permanently from your system.</p> <pre><code>dataset = client.dataset('Dataset ID')\nprint(dataset.data)\n</code></pre>"},{"location":"dataset/#list-datasets","title":"List Datasets","text":"<p>Here, we showcase how to retrieve a list of datasets. You can set the desired page size to control the number of results per page. The code demonstrates how to retrieve the first page of datasets, navigate to the next page, and return to the previous page if available.</p> <pre><code>dataset = client.dataset_list(page_size=1)\nprint(dataset.results)\nprint(\"Next: \", dataset.results)\ndataset.next()\nprint(\"Next: \", dataset.results)\ndataset.previous()\nprint(\"Previous: \", dataset.results)\n</code></pre>"},{"location":"dataset/#get-url-form-storage","title":"Get URL form Storage","text":"<p>This function retrieves a URL for accessing the dataset storage. It's useful when you need to access the datasets data or artifacts stored in a remote location. The example provided download link of the datasets.</p> <pre><code>modelId = \"Model ID\"\nmodel = client.model(modelId)\nprint(model.data)\nmodel.get_download_link(\"archive\")\n</code></pre>"},{"location":"model/","title":"Model Management Operations","text":""},{"location":"model/#get-model-by-id","title":"Get Model by ID","text":"<p>This function allows you to retrieve a model by its unique identifier (ID). It initializes a model object using the provided model ID and allows you to access and manipulate the model's data.</p> <pre><code>model = client.model(\"Model ID\")\nprint(model.data)\n</code></pre>"},{"location":"model/#project-and-dataset-check","title":"Project and Dataset Check","text":"<p>This code snippet checks whether both a project and a dataset exist based on their respective IDs. It initializes project and dataset objects using their IDs and raises an exception if either of them is not available.</p> <pre><code>project = client.project(\"Poject ID\")\ndataset = client.dataset(\"Dataset ID\")\nif None in (project.id, dataset.id):\n    raise \"Available\"\n</code></pre>"},{"location":"model/#create-new-model","title":"Create New Model","text":"<p>This function creates a new model with specified parameters and configurations. It takes in data including the model's name, project ID, dataset ID, and configuration settings such as batch size, cache type, device, number of epochs, and image size. It then creates the model using the provided data.</p> <pre><code>data = {\n    \"meta\": {\"name\": \"sdk model\"},\n    \"projectId\": project.id,\n    \"datasetId\": dataset.id,\n    \"config\": {\n        \"batchSize\": \"-1\",\n        \"cache\": \"ram\",\n        \"device\": \"name\",\n        \"epochs\": \"5\",\n        \"imageSize\": \"640\",\n        \"patience\": \"5\"\n    }\n}\nmodel = client.model()\nmodel.create_model(data)\n</code></pre>"},{"location":"model/#update-model","title":"Update Model","text":"<p>This code demonstrates how to update the metadata of an existing model. You can change attributes like the model's name by specifying the model's ID and providing updated metadata.</p> <pre><code>model = client.model(\"Model ID\")\nmodel.update({\"meta\": {\"name\": \"model Name\"}})\n</code></pre>"},{"location":"model/#delete-model","title":"Delete Model","text":"<p>This function allows you to delete a specific model by providing its ID. Be cautious when using this function, as it permanently removes the model and its associated data.</p> <pre><code>model = client.model(\"Model ID\")\nmodel.delete()\n</code></pre>"},{"location":"model/#listing-public-models","title":"Listing Public Models","text":"<p>This code snippet fetches a list of public models, typically with a specified page size. It prints the results of the current page, moves to the next page, and prints those results as well. This process can be repeated until you've retrieved all the available public models.</p> <pre><code>model_list = client.model_list(page_size=10, public=True)\nprint(\"First: \", model_list.results)\nmodel_list.next()\nprint(\"Next: \", model_list.results)\nmodel_list.previous()\nprint(\"Previous: \", model_list.results)\n</code></pre>"},{"location":"model/#upload-metrics","title":"Upload Metrics","text":"<p>Here, you can upload training metrics for a specific model. The function takes the model's ID and a dictionary of metrics data, typically containing loss and accuracy values for different training iterations. This helps in tracking and visualizing the model's training progress.</p> <pre><code>modelId = \"Model ID\"\nmodel = client.model(modelId)\ndata = {\n    1: '{\"loss/1\": 0.5, \"accuracy/1\": 0.85}',\n    2: '{\"loss/2\": 0.4, \"accuracy/2\": 0.88}',\n    3: '{\"loss/3\": 0.3, \"accuracy/3\": 0.90}',\n}\nmodel.upload_metrics(data)\n</code></pre>"},{"location":"model/#export-model","title":"Export Model","text":"<p>This code exports a model in a specified format, which is PyTorch in this case. You provide the model's ID, and the function exports the model in the requested format, making it suitable for deployment or further analysis.</p> <pre><code>modelId = \"Model ID\"\nmodel = client.model(modelId)\nprint(model.data)\nmodel.export(format=\"pyTorch\")\n</code></pre>"},{"location":"model/#get-url-form-storage","title":"Get URL form Storage","text":"<p>This function retrieves a URL for accessing the model's storage. It's useful when you need to access the model's data or artifacts stored in a remote location. The example provided download link of the model.</p> <pre><code>modelId = \"Model ID\"\nmodel = client.model(modelId)\nprint(model.data)\nmodel.get_download_link(\"best\")\n</code></pre>"},{"location":"project/","title":"Project Management Operations","text":""},{"location":"project/#create-project","title":"Create Project","text":"<p>We start by creating a new project with the following metadata:</p> <pre><code>data = {\"meta\": {\"name\": \"my project\"}}\nproject = client.project()\nproject.create_project(data)\n</code></pre>"},{"location":"project/#get-project-by-id","title":"Get Project by ID","text":"<p>Next, we retrieve a project using its unique identifier ('arP1HAMED0tcz770vG5l') and print its data:</p> <pre><code>project = client.project('arP1HAMED0tcz770vG5l')\nprint(project.data)\n</code></pre>"},{"location":"project/#update-project","title":"Update Project","text":"<p>We can update the project by changing its name. Here, we update the project with the new name 'Project name update':</p> <pre><code>project = client.project('arP1HAMED0tcz770vG5l')\nprint(project.update({\"meta\": {\"name\": \"Project name update\"}}))\n</code></pre>"},{"location":"project/#delete-project","title":"Delete Project","text":"<p>To remove a project, we use the project's unique identifier ('arP1HAMED0tcz770vG5l') and delete it:</p> <pre><code>project = client.project(\"arP1HAMED0tcz770vG5l\")\nprint(project.delete())\n</code></pre>"},{"location":"project/#list-projects","title":"List Projects","text":"<p>This code snippet demonstrates how to use a Python client to list projects. The client appears to interact with some external system or service that provides a list of projects, likely in a paginated format. The code retrieves and prints project data from this service in a step-by-step fashion, allowing users to navigate through different pages of project listings.</p> <pre><code>projects = client.project_list(page_size=1, public=True)\nprint(\"Next:\", projects.results)\nprojects.next()\nprint(\"Next:\", projects.results)\nprojects.previous()\nprint(\"Previous Page:\", projects.results)\n</code></pre>"},{"location":"quickstart/","title":"Quickstart: Installing HUB-SDK","text":"<p>Welcome to the HUB-SDK installation guide, where we'll walk you through the steps to set up HUB-SDK, a powerful tool for various tasks. Follow these instructions to ensure a smooth and professional installation experience.</p>"},{"location":"quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following prerequisites in place:</p> <ul> <li> <p>Python: Ensure you have Python installed on your system. You can download Python from python.org if you don't have it already.</p> </li> <li> <p>Git (Optional): If you plan to install HUB-SDK from the GitHub repository, make sure you have Git installed on your system. You can download Git from git-scm.com.</p> </li> </ul>"},{"location":"quickstart/#installation-methods","title":"Installation Methods","text":"<p>There are two primary methods for installing HUB-SDK: using PyPI for the latest stable release or cloning the Ultralytics GitHub repository for the most up-to-date version. Additionally, Docker can be used to run HUB-SDK in an isolated container, eliminating the need for local installation.</p>"},{"location":"quickstart/#installing-from-pypi","title":"Installing from PyPI","text":"<p>To install the latest stable release of HUB-SDK from PyPI, run the following command:</p> <pre><code>pip install hub-sdk\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>         Bases: <code>Auth</code></p> <p>A client class for interacting with a HUB service, extending authentication capabilities.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>dict</code> <p>A dictionary containing authentication credentials.                 Defaults to None. If None, the client will attempt                 to retrieve the API key from the environment variable                 \"HUB_API_KEY\".</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>authenticated</code> <code>bool</code> <p>Indicates whether the client is authenticated.</p> <code>api_key</code> <code>str</code> <p>The API key for authentication.</p> <code>id_token</code> <code>str</code> <p>The identity token for authentication.</p> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>class HUBClient(Auth):\n\"\"\"\n    A client class for interacting with a HUB service, extending authentication capabilities.\n\n\n    Args:\n        credentials (dict): A dictionary containing authentication credentials.\n                            Defaults to None. If None, the client will attempt\n                            to retrieve the API key from the environment variable\n                            \"HUB_API_KEY\".\n\n\n    Attributes:\n        authenticated (bool): Indicates whether the client is authenticated.\n        api_key (str): The API key for authentication.\n        id_token (str): The identity token for authentication.\n    \"\"\"\n\n    def __init__(self, credentials=None):\n\"\"\"\n        Initializes the HUBClient instance.\n\n        Args:\n            credentials (dict): A dictionary containing authentication credentials.\n        \"\"\"\n        self.authenticated = False\n        if not credentials:\n            self.api_key = os.environ.get(\"HUB_API_KEY\")  # Safely retrieve the API key from an environment variable.\n            credentials = {\"api_key\": self.api_key}\n\n        self.login(**credentials)\n\n    def login(self, api_key=None, id_token=None, email=None, password=None):\n\"\"\"\n        Logs in the client using provided authentication credentials.\n\n        Args:\n            api_key (str): The API key for authentication.\n            id_token (str): The identity token for authentication.\n            email (str): User's email.\n            password (str): User's password.\n        \"\"\"\n        self.api_key = api_key\n        self.id_token = id_token\n        if self.api_key or self.id_token:\n            if self.authenticate():\n                self.authenticated = True\n\n        elif email and password:\n            if self.authorize(email, password):\n                self.authenticated = True  \n\n    @require_authentication\n    def model(self, model_id: str = None):\n\"\"\"\n        Returns an instance of the Models class for interacting with models.\n\n        Returns:\n            Models: An instance of the Models class.\n        \"\"\"\n        return Models(model_id, self.get_auth_header())\n\n\n    @require_authentication\n    def dataset(self, dataset_id: str = None):\n\"\"\"\n        Returns an instance of the Datasets class for interacting with datasets.\n\n        Returns:\n            Datasets: An instance of the Datasets class.\n        \"\"\"\n        return Datasets(dataset_id, self.get_auth_header())\n\n    @require_authentication\n    def team(self, arg):\n        raise Exception(\"Comming Soon\")\n\n    @require_authentication\n    def project(self, project_id: str = None):\n\"\"\"\n        Returns an instance of the Projects class for interacting with Projects.\n\n        Returns:\n            Projects: An instance of the Projects class.\n        \"\"\"\n        return Projects(project_id, self.get_auth_header())\n\n\n    @require_authentication\n    def model_list(self , page_size: int = None, public: bool = None):\n\"\"\"\n        Returns a ModelList instance for interacting with a list of models.\n\n        Args:\n            page_size (int, optional): The number of models per page. Defaults to None.\n            public (bool, optional): \n\n        Returns:\n            ModelList: An instance of the ModelList class.\n        \"\"\"\n        return ModelList(page_size, public, self.get_auth_header())\n\n\n    @require_authentication\n    def project_list(self, page_size: int = None, public: bool = None):\n\"\"\"\n        Returns a ProjectList instance for interacting with a list of projects.\n\n        Args:\n            page_size (int, optional): The number of projects per page. Defaults to None.\n\n        Returns:\n            ProjectList: An instance of the ProjectList class.\n        \"\"\"\n        return ProjectList(page_size, public, self.get_auth_header())\n\n    @require_authentication\n    def dataset_list(self, page_size: int = None, public: bool = None):\n\"\"\"\n        Returns a DatasetList instance for interacting with a list of datasets.\n\n        Args:\n            page_size (int, optional): The number of datasets per page. Defaults to None.\n\n        Returns:\n            DatasetList: An instance of the DatasetList class.\n        \"\"\"\n        return DatasetList(page_size, public, self.get_auth_header())\n\n    @require_authentication\n    def team_list(self, page_size=None, public=None):\n        raise Exception(\"Comming Soon\")\n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.__init__","title":"<code>__init__(credentials=None)</code>","text":"<p>Initializes the HUBClient instance.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>dict</code> <p>A dictionary containing authentication credentials.</p> <code>None</code> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>def __init__(self, credentials=None):\n\"\"\"\n    Initializes the HUBClient instance.\n\n    Args:\n        credentials (dict): A dictionary containing authentication credentials.\n    \"\"\"\n    self.authenticated = False\n    if not credentials:\n        self.api_key = os.environ.get(\"HUB_API_KEY\")  # Safely retrieve the API key from an environment variable.\n        credentials = {\"api_key\": self.api_key}\n\n    self.login(**credentials)\n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.dataset","title":"<code>dataset(dataset_id=None)</code>","text":"<p>Returns an instance of the Datasets class for interacting with datasets.</p> <p>Returns:</p> Name Type Description <code>Datasets</code> <p>An instance of the Datasets class.</p> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>@require_authentication\ndef dataset(self, dataset_id: str = None):\n\"\"\"\n    Returns an instance of the Datasets class for interacting with datasets.\n\n    Returns:\n        Datasets: An instance of the Datasets class.\n    \"\"\"\n    return Datasets(dataset_id, self.get_auth_header())\n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.dataset_list","title":"<code>dataset_list(page_size=None, public=None)</code>","text":"<p>Returns a DatasetList instance for interacting with a list of datasets.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>The number of datasets per page. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>DatasetList</code> <p>An instance of the DatasetList class.</p> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>@require_authentication\ndef dataset_list(self, page_size: int = None, public: bool = None):\n\"\"\"\n    Returns a DatasetList instance for interacting with a list of datasets.\n\n    Args:\n        page_size (int, optional): The number of datasets per page. Defaults to None.\n\n    Returns:\n        DatasetList: An instance of the DatasetList class.\n    \"\"\"\n    return DatasetList(page_size, public, self.get_auth_header())\n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.login","title":"<code>login(api_key=None, id_token=None, email=None, password=None)</code>","text":"<p>Logs in the client using provided authentication credentials.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The API key for authentication.</p> <code>None</code> <code>id_token</code> <code>str</code> <p>The identity token for authentication.</p> <code>None</code> <code>email</code> <code>str</code> <p>User's email.</p> <code>None</code> <code>password</code> <code>str</code> <p>User's password.</p> <code>None</code> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>def login(self, api_key=None, id_token=None, email=None, password=None):\n\"\"\"\n    Logs in the client using provided authentication credentials.\n\n    Args:\n        api_key (str): The API key for authentication.\n        id_token (str): The identity token for authentication.\n        email (str): User's email.\n        password (str): User's password.\n    \"\"\"\n    self.api_key = api_key\n    self.id_token = id_token\n    if self.api_key or self.id_token:\n        if self.authenticate():\n            self.authenticated = True\n\n    elif email and password:\n        if self.authorize(email, password):\n            self.authenticated = True  \n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.model","title":"<code>model(model_id=None)</code>","text":"<p>Returns an instance of the Models class for interacting with models.</p> <p>Returns:</p> Name Type Description <code>Models</code> <p>An instance of the Models class.</p> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>@require_authentication\ndef model(self, model_id: str = None):\n\"\"\"\n    Returns an instance of the Models class for interacting with models.\n\n    Returns:\n        Models: An instance of the Models class.\n    \"\"\"\n    return Models(model_id, self.get_auth_header())\n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.model_list","title":"<code>model_list(page_size=None, public=None)</code>","text":"<p>Returns a ModelList instance for interacting with a list of models.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>The number of models per page. Defaults to None.</p> <code>None</code> <code>public</code> <code>bool</code> <code>None</code> <p>Returns:</p> Name Type Description <code>ModelList</code> <p>An instance of the ModelList class.</p> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>@require_authentication\ndef model_list(self , page_size: int = None, public: bool = None):\n\"\"\"\n    Returns a ModelList instance for interacting with a list of models.\n\n    Args:\n        page_size (int, optional): The number of models per page. Defaults to None.\n        public (bool, optional): \n\n    Returns:\n        ModelList: An instance of the ModelList class.\n    \"\"\"\n    return ModelList(page_size, public, self.get_auth_header())\n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.project","title":"<code>project(project_id=None)</code>","text":"<p>Returns an instance of the Projects class for interacting with Projects.</p> <p>Returns:</p> Name Type Description <code>Projects</code> <p>An instance of the Projects class.</p> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>@require_authentication\ndef project(self, project_id: str = None):\n\"\"\"\n    Returns an instance of the Projects class for interacting with Projects.\n\n    Returns:\n        Projects: An instance of the Projects class.\n    \"\"\"\n    return Projects(project_id, self.get_auth_header())\n</code></pre>"},{"location":"reference/#hub_sdk.hub_client.HUBClient.project_list","title":"<code>project_list(page_size=None, public=None)</code>","text":"<p>Returns a ProjectList instance for interacting with a list of projects.</p> <p>Parameters:</p> Name Type Description Default <code>page_size</code> <code>int</code> <p>The number of projects per page. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ProjectList</code> <p>An instance of the ProjectList class.</p> Source code in <code>hub_sdk/hub_client.py</code> <pre><code>@require_authentication\ndef project_list(self, page_size: int = None, public: bool = None):\n\"\"\"\n    Returns a ProjectList instance for interacting with a list of projects.\n\n    Args:\n        page_size (int, optional): The number of projects per page. Defaults to None.\n\n    Returns:\n        ProjectList: An instance of the ProjectList class.\n    \"\"\"\n    return ProjectList(page_size, public, self.get_auth_header())\n</code></pre>"}]}